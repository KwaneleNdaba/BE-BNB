{"version":3,"sources":["../../src/controllers/users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { Container } from 'typedi';\r\nimport { User } from '@interfaces/users.interface';\r\nimport { UserService } from '@services/users.service';\r\n\r\nexport class UserController {\r\n  public user = Container.get(UserService);\r\n\r\n  public getUsers = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const findAllUsersData: User[] = await this.user.findAllUser();\r\n\r\n      res.status(200).json({ data: findAllUsersData, message: 'findAll' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getUserById = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const userId: string = req.params.id;\r\n      const findOneUserData: User = await this.user.findUserById(userId);\r\n\r\n      res.status(200).json({ data: findOneUserData, message: 'findOne' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public createUser = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const userData: User = req.body;\r\n      const createUserData: User = await this.user.createUser(userData);\r\n\r\n      res.status(201).json({ data: createUserData, message: 'created' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public updateUser = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const userId: string = req.params.id;\r\n      const userData: User = req.body;\r\n      const updateUserData: User = await this.user.updateUser(userId, userData);\r\n\r\n      res.status(200).json({ data: updateUserData, message: 'updated' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public deleteUser = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const userId: string = req.params.id;\r\n      const deleteUserData: User = await this.user.deleteUser(userId);\r\n\r\n      res.status(200).json({ data: deleteUserData, message: 'deleted' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n}\r\n"],"names":["UserController","user","Container","get","UserService","getUsers","req","res","next","findAllUsersData","findAllUser","status","json","data","message","error","getUserById","userId","params","id","findOneUserData","findUserById","createUser","userData","body","createUserData","updateUser","updateUserData","deleteUser","deleteUserData"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBAJa;8BAEE;;;;;;;;;;;;;;AAErB,IAAA,AAAMA,iBAAN,MAAMA;;QACX,uBAAOC,QAAOC,iBAAS,CAACC,GAAG,CAACC,yBAAW;QAEvC,uBAAOC,YAAW,OAAOC,KAAcC,KAAeC;YACpD,IAAI;gBACF,MAAMC,mBAA2B,MAAM,IAAI,CAACR,IAAI,CAACS,WAAW;gBAE5DH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMJ;oBAAkBK,SAAS;gBAAU;YACpE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOC,eAAc,OAAOV,KAAcC,KAAeC;YACvD,IAAI;gBACF,MAAMS,SAAiBX,IAAIY,MAAM,CAACC,EAAE;gBACpC,MAAMC,kBAAwB,MAAM,IAAI,CAACnB,IAAI,CAACoB,YAAY,CAACJ;gBAE3DV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMO;oBAAiBN,SAAS;gBAAU;YACnE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOO,cAAa,OAAOhB,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMe,WAAiBjB,IAAIkB,IAAI;gBAC/B,MAAMC,iBAAuB,MAAM,IAAI,CAACxB,IAAI,CAACqB,UAAU,CAACC;gBAExDhB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMY;oBAAgBX,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOW,cAAa,OAAOpB,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMS,SAAiBX,IAAIY,MAAM,CAACC,EAAE;gBACpC,MAAMI,WAAiBjB,IAAIkB,IAAI;gBAC/B,MAAMG,iBAAuB,MAAM,IAAI,CAAC1B,IAAI,CAACyB,UAAU,CAACT,QAAQM;gBAEhEhB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMc;oBAAgBb,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;QAEA,uBAAOa,cAAa,OAAOtB,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMS,SAAiBX,IAAIY,MAAM,CAACC,EAAE;gBACpC,MAAMU,iBAAuB,MAAM,IAAI,CAAC5B,IAAI,CAAC2B,UAAU,CAACX;gBAExDV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMgB;oBAAgBf,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;;AACF"}