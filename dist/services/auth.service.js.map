{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { hash, compare } from 'bcrypt';\r\nimport { sign } from 'jsonwebtoken';\r\nimport { Service } from 'typedi';\r\nimport { SECRET_KEY } from '@config';\r\nimport { HttpException } from '../exceptions/HttpException';\r\nimport { DataStoredInToken, TokenData } from '@interfaces/auth.interface';\r\nimport { User } from '@interfaces/users.interface';\r\nimport { UserModel } from '@models/users.model';\r\n\r\nconst createToken = (user: User): TokenData => {\r\n  const dataStoredInToken: DataStoredInToken = { _id: user._id };\r\n  const expiresIn: number = 60 * 60;\r\n\r\n  return { expiresIn, token: sign(dataStoredInToken, SECRET_KEY, { expiresIn }) };\r\n}\r\n\r\nconst createCookie = (tokenData: TokenData): string => {\r\n  return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\r\n}\r\n\r\n@Service()\r\nexport class AuthService {\r\n  public async signup(userData: User): Promise<User> {\r\n    const findUser: User = await UserModel.findOne({ email: userData.email });\r\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\r\n\r\n    const hashedPassword = await hash(userData.password, 10);\r\n    const createUserData: User = await UserModel.create({ ...userData, password: hashedPassword });\r\n\r\n    return createUserData;\r\n  }\r\n\r\n  public async login(userData: User): Promise<{ cookie: string; findUser: User }> {\r\n    const findUser: User = await UserModel.findOne({ email: userData.email });\r\n    if (!findUser) throw new HttpException(409, `This email ${userData.email} was not found`);\r\n\r\n    const isPasswordMatching: boolean = await compare(userData.password, findUser.password);\r\n    if (!isPasswordMatching) throw new HttpException(409, \"Password is not matching\");\r\n\r\n    const tokenData = createToken(findUser);\r\n    const cookie = createCookie(tokenData);\r\n\r\n    return { cookie, findUser };\r\n  }\r\n\r\n  public async logout(userData: User): Promise<User> {\r\n    const findUser: User = await UserModel.findOne({ email: userData.email, password: userData.password });\r\n    if (!findUser) throw new HttpException(409, `This email ${userData.email} was not found`);\r\n\r\n    return findUser;\r\n  }\r\n}\r\n"],"names":["AuthService","createToken","user","dataStoredInToken","_id","expiresIn","token","sign","SECRET_KEY","createCookie","tokenData","signup","userData","findUser","UserModel","findOne","email","HttpException","hashedPassword","hash","password","createUserData","create","login","isPasswordMatching","compare","cookie","logout","Service"],"mappings":";;;;+BAqBaA;;;eAAAA;;;wBArBiB;8BACT;wBACG;wBACG;+BACG;4BAGJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE1B,MAAMC,cAAc,CAACC;IACnB,MAAMC,oBAAuC;QAAEC,KAAKF,KAAKE,GAAG;IAAC;IAC7D,MAAMC,YAAoB,KAAK;IAE/B,OAAO;QAAEA;QAAWC,OAAOC,IAAAA,kBAAI,EAACJ,mBAAmBK,kBAAU,EAAE;YAAEH;QAAU;IAAG;AAChF;AAEA,MAAMI,eAAe,CAACC;IACpB,OAAO,CAAC,cAAc,EAAEA,UAAUJ,KAAK,CAAC,oBAAoB,EAAEI,UAAUL,SAAS,CAAC,CAAC,CAAC;AACtF;IAGaL,cAAN;IACL,MAAaW,OAAOC,QAAc,EAAiB;QACjD,MAAMC,WAAiB,MAAMC,qBAAS,CAACC,OAAO,CAAC;YAAEC,OAAOJ,SAASI,KAAK;QAAC;QACvE,IAAIH,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEL,SAASI,KAAK,CAAC,eAAe,CAAC;QAExF,MAAME,iBAAiB,MAAMC,IAAAA,YAAI,EAACP,SAASQ,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAMP,qBAAS,CAACQ,MAAM,CAAC,wCAAKV;YAAUQ,UAAUF;;QAE7E,OAAOG;IACT;IAEA,MAAaE,MAAMX,QAAc,EAA+C;QAC9E,MAAMC,WAAiB,MAAMC,qBAAS,CAACC,OAAO,CAAC;YAAEC,OAAOJ,SAASI,KAAK;QAAC;QACvE,IAAI,CAACH,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEL,SAASI,KAAK,CAAC,cAAc,CAAC;QAExF,MAAMQ,qBAA8B,MAAMC,IAAAA,eAAO,EAACb,SAASQ,QAAQ,EAAEP,SAASO,QAAQ;QACtF,IAAI,CAACI,oBAAoB,MAAM,IAAIP,4BAAa,CAAC,KAAK;QAEtD,MAAMP,YAAYT,YAAYY;QAC9B,MAAMa,SAASjB,aAAaC;QAE5B,OAAO;YAAEgB;YAAQb;QAAS;IAC5B;IAEA,MAAac,OAAOf,QAAc,EAAiB;QACjD,MAAMC,WAAiB,MAAMC,qBAAS,CAACC,OAAO,CAAC;YAAEC,OAAOJ,SAASI,KAAK;YAAEI,UAAUR,SAASQ,QAAQ;QAAC;QACpG,IAAI,CAACP,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEL,SAASI,KAAK,CAAC,cAAc,CAAC;QAExF,OAAOH;IACT;AACF;AA9Bab;IADZ4B,IAAAA,eAAO;GACK5B"}