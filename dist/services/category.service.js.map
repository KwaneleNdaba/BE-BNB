{"version":3,"sources":["../../src/services/category.service.ts"],"sourcesContent":["import { Service } from 'typedi';\r\nimport { Category } from '@interfaces/category.interface';\r\nimport { CategoryModel } from '@models/category.model';\r\nimport { CreateCategoryDto } from '@dtos/category.dto';\r\nimport { HttpException } from '@exceptions/HttpException';\r\n\r\n@Service()\r\nexport class CategoryService {\r\n  public async findAllCategories(): Promise<Category[]> {\r\n    const categories: Category[] = await CategoryModel.find();\r\n    return categories;\r\n  }\r\n\r\n  public async findCategoryById(categoryId: string): Promise<Category> {\r\n    const category: Category = await CategoryModel.findOne({ _id: categoryId });\r\n    if (!category) {\r\n      throw new HttpException(404, \"Category not found\");\r\n    }\r\n    return category;\r\n  }\r\n\r\n  public async createCategory(categoryData: CreateCategoryDto): Promise<Category> {\r\n    const existingCategory = await CategoryModel.findOne({ slug: categoryData.slug });\r\n    if (existingCategory) {\r\n      throw new HttpException(409, `Category with slug ${categoryData.slug} already exists`);\r\n    }\r\n\r\n    const createdCategory: Category = await CategoryModel.create(categoryData);\r\n    return createdCategory;\r\n  }\r\n\r\n  public async updateCategory(categoryId: string, categoryData: CreateCategoryDto): Promise<Category> {\r\n    const existingCategory = await CategoryModel.findOne({ slug: categoryData.slug });\r\n    if (existingCategory && existingCategory._id !== categoryId) {\r\n      throw new HttpException(409, `Category with slug ${categoryData.slug} already exists`);\r\n    }\r\n\r\n    const updatedCategory: Category = await CategoryModel.findByIdAndUpdate(categoryId, categoryData, { new: true });\r\n    if (!updatedCategory) {\r\n      throw new HttpException(404, \"Category not found\");\r\n    }\r\n\r\n    return updatedCategory;\r\n  }\r\n\r\n  public async deleteCategory(categoryId: string): Promise<Category> {\r\n    const deletedCategory: Category = await CategoryModel.findOneAndDelete({_id : categoryId});\r\n    if (!deletedCategory) {\r\n      throw new HttpException(404, \"Category not found\");\r\n    }\r\n    return deletedCategory;\r\n  }\r\n}\r\n"],"names":["CategoryService","findAllCategories","categories","CategoryModel","find","findCategoryById","categoryId","category","findOne","_id","HttpException","createCategory","categoryData","existingCategory","slug","createdCategory","create","updateCategory","updatedCategory","findByIdAndUpdate","new","deleteCategory","deletedCategory","findOneAndDelete","Service"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBAPW;+BAEM;+BAEA;;;;;;;IAGjBA,kBAAN;IACL,MAAaC,oBAAyC;QACpD,MAAMC,aAAyB,MAAMC,4BAAa,CAACC,IAAI;QACvD,OAAOF;IACT;IAEA,MAAaG,iBAAiBC,UAAkB,EAAqB;QACnE,MAAMC,WAAqB,MAAMJ,4BAAa,CAACK,OAAO,CAAC;YAAEC,KAAKH;QAAW;QACzE,IAAI,CAACC,UAAU;YACb,MAAM,IAAIG,4BAAa,CAAC,KAAK;QAC/B;QACA,OAAOH;IACT;IAEA,MAAaI,eAAeC,YAA+B,EAAqB;QAC9E,MAAMC,mBAAmB,MAAMV,4BAAa,CAACK,OAAO,CAAC;YAAEM,MAAMF,aAAaE,IAAI;QAAC;QAC/E,IAAID,kBAAkB;YACpB,MAAM,IAAIH,4BAAa,CAAC,KAAK,CAAC,mBAAmB,EAAEE,aAAaE,IAAI,CAAC,eAAe,CAAC;QACvF;QAEA,MAAMC,kBAA4B,MAAMZ,4BAAa,CAACa,MAAM,CAACJ;QAC7D,OAAOG;IACT;IAEA,MAAaE,eAAeX,UAAkB,EAAEM,YAA+B,EAAqB;QAClG,MAAMC,mBAAmB,MAAMV,4BAAa,CAACK,OAAO,CAAC;YAAEM,MAAMF,aAAaE,IAAI;QAAC;QAC/E,IAAID,oBAAoBA,iBAAiBJ,GAAG,KAAKH,YAAY;YAC3D,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,mBAAmB,EAAEE,aAAaE,IAAI,CAAC,eAAe,CAAC;QACvF;QAEA,MAAMI,kBAA4B,MAAMf,4BAAa,CAACgB,iBAAiB,CAACb,YAAYM,cAAc;YAAEQ,KAAK;QAAK;QAC9G,IAAI,CAACF,iBAAiB;YACpB,MAAM,IAAIR,4BAAa,CAAC,KAAK;QAC/B;QAEA,OAAOQ;IACT;IAEA,MAAaG,eAAef,UAAkB,EAAqB;QACjE,MAAMgB,kBAA4B,MAAMnB,4BAAa,CAACoB,gBAAgB,CAAC;YAACd,KAAMH;QAAU;QACxF,IAAI,CAACgB,iBAAiB;YACpB,MAAM,IAAIZ,4BAAa,CAAC,KAAK;QAC/B;QACA,OAAOY;IACT;AACF;AA7CatB;IADZwB,IAAAA,eAAO;GACKxB"}